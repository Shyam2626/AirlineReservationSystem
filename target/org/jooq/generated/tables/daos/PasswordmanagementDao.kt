/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.generated.tables.Passwordmanagement
import org.jooq.generated.tables.records.PasswordmanagementRecord
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PasswordmanagementDao(configuration: Configuration?) : DAOImpl<PasswordmanagementRecord, org.jooq.generated.tables.pojos.Passwordmanagement, Int>(Passwordmanagement.PASSWORDMANAGEMENT, org.jooq.generated.tables.pojos.Passwordmanagement::class.java, configuration) {

    /**
     * Create a new PasswordmanagementDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: org.jooq.generated.tables.pojos.Passwordmanagement): Int? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Int?, upperInclusive: Int?): List<org.jooq.generated.tables.pojos.Passwordmanagement> = fetchRange(Passwordmanagement.PASSWORDMANAGEMENT.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Int): List<org.jooq.generated.tables.pojos.Passwordmanagement> = fetch(Passwordmanagement.PASSWORDMANAGEMENT.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Int): org.jooq.generated.tables.pojos.Passwordmanagement? = fetchOne(Passwordmanagement.PASSWORDMANAGEMENT.ID, value)

    /**
     * Fetch records that have <code>userid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUserid(lowerInclusive: Int?, upperInclusive: Int?): List<org.jooq.generated.tables.pojos.Passwordmanagement> = fetchRange(Passwordmanagement.PASSWORDMANAGEMENT.USERID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>userid IN (values)</code>
     */
    fun fetchByUserid(vararg values: Int): List<org.jooq.generated.tables.pojos.Passwordmanagement> = fetch(Passwordmanagement.PASSWORDMANAGEMENT.USERID, *values.toTypedArray())

    /**
     * Fetch records that have <code>secretkey BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSecretkey(lowerInclusive: String?, upperInclusive: String?): List<org.jooq.generated.tables.pojos.Passwordmanagement> = fetchRange(Passwordmanagement.PASSWORDMANAGEMENT.SECRETKEY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>secretkey IN (values)</code>
     */
    fun fetchBySecretkey(vararg values: String): List<org.jooq.generated.tables.pojos.Passwordmanagement> = fetch(Passwordmanagement.PASSWORDMANAGEMENT.SECRETKEY, *values)

    /**
     * Fetch records that have <code>salt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSalt(lowerInclusive: String?, upperInclusive: String?): List<org.jooq.generated.tables.pojos.Passwordmanagement> = fetchRange(Passwordmanagement.PASSWORDMANAGEMENT.SALT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>salt IN (values)</code>
     */
    fun fetchBySalt(vararg values: String): List<org.jooq.generated.tables.pojos.Passwordmanagement> = fetch(Passwordmanagement.PASSWORDMANAGEMENT.SALT, *values)

    /**
     * Fetch records that have <code>iv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfIv(lowerInclusive: String?, upperInclusive: String?): List<org.jooq.generated.tables.pojos.Passwordmanagement> = fetchRange(Passwordmanagement.PASSWORDMANAGEMENT.IV, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>iv IN (values)</code>
     */
    fun fetchByIv(vararg values: String): List<org.jooq.generated.tables.pojos.Passwordmanagement> = fetch(Passwordmanagement.PASSWORDMANAGEMENT.IV, *values)
}

/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables


import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.generated.Airlinereservationsystem
import org.jooq.generated.keys.KEY_USER_PRIMARY
import org.jooq.generated.tables.records.UserRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class User(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UserRecord>?,
    aliased: Table<UserRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UserRecord>(
    alias,
    Airlinereservationsystem.AIRLINERESERVATIONSYSTEM,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>AirlineReservationSystem.User</code>
         */
        val USER: User = User()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UserRecord> = UserRecord::class.java

    /**
     * The column <code>AirlineReservationSystem.User.userId</code>.
     */
    val USERID: TableField<UserRecord, Int?> = createField(DSL.name("userId"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>AirlineReservationSystem.User.firstName</code>.
     */
    val FIRSTNAME: TableField<UserRecord, String?> = createField(DSL.name("firstName"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>AirlineReservationSystem.User.lastName</code>.
     */
    val LASTNAME: TableField<UserRecord, String?> = createField(DSL.name("lastName"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>AirlineReservationSystem.User.age</code>.
     */
    val AGE: TableField<UserRecord, Int?> = createField(DSL.name("age"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>AirlineReservationSystem.User.phone</code>.
     */
    val PHONE: TableField<UserRecord, String?> = createField(DSL.name("phone"), SQLDataType.VARCHAR(12), this, "")

    /**
     * The column <code>AirlineReservationSystem.User.email</code>.
     */
    val EMAIL: TableField<UserRecord, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>AirlineReservationSystem.User.password</code>.
     */
    val PASSWORD: TableField<UserRecord, String?> = createField(DSL.name("password"), SQLDataType.VARCHAR(255), this, "")

    private constructor(alias: Name, aliased: Table<UserRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UserRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>AirlineReservationSystem.User</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>AirlineReservationSystem.User</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>AirlineReservationSystem.User</code> table reference
     */
    constructor(): this(DSL.name("User"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UserRecord>): this(Internal.createPathAlias(child, key), child, key, USER, null)
    override fun getSchema(): Schema? = if (aliased()) null else Airlinereservationsystem.AIRLINERESERVATIONSYSTEM
    override fun getIdentity(): Identity<UserRecord, Int?> = super.getIdentity() as Identity<UserRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<UserRecord> = KEY_USER_PRIMARY
    override fun `as`(alias: String): User = User(DSL.name(alias), this)
    override fun `as`(alias: Name): User = User(alias, this)
    override fun `as`(alias: Table<*>): User = User(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): User = User(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): User = User(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): User = User(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<Int?, String?, String?, Int?, String?, String?, String?> = super.fieldsRow() as Row7<Int?, String?, String?, Int?, String?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, String?, String?, Int?, String?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, String?, String?, Int?, String?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}

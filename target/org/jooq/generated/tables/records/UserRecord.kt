/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.generated.tables.User
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserRecord() : UpdatableRecordImpl<UserRecord>(User.USER), Record7<Int?, String?, String?, Int?, String?, String?, String?> {

    open var userid: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var firstname: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var lastname: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var age: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var phone: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var email: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var password: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<Int?, String?, String?, Int?, String?, String?, String?> = super.fieldsRow() as Row7<Int?, String?, String?, Int?, String?, String?, String?>
    override fun valuesRow(): Row7<Int?, String?, String?, Int?, String?, String?, String?> = super.valuesRow() as Row7<Int?, String?, String?, Int?, String?, String?, String?>
    override fun field1(): Field<Int?> = User.USER.USERID
    override fun field2(): Field<String?> = User.USER.FIRSTNAME
    override fun field3(): Field<String?> = User.USER.LASTNAME
    override fun field4(): Field<Int?> = User.USER.AGE
    override fun field5(): Field<String?> = User.USER.PHONE
    override fun field6(): Field<String?> = User.USER.EMAIL
    override fun field7(): Field<String?> = User.USER.PASSWORD
    override fun component1(): Int? = userid
    override fun component2(): String? = firstname
    override fun component3(): String? = lastname
    override fun component4(): Int? = age
    override fun component5(): String? = phone
    override fun component6(): String? = email
    override fun component7(): String? = password
    override fun value1(): Int? = userid
    override fun value2(): String? = firstname
    override fun value3(): String? = lastname
    override fun value4(): Int? = age
    override fun value5(): String? = phone
    override fun value6(): String? = email
    override fun value7(): String? = password

    override fun value1(value: Int?): UserRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): UserRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): UserRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): UserRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): UserRecord {
        set(4, value)
        return this
    }

    override fun value6(value: String?): UserRecord {
        set(5, value)
        return this
    }

    override fun value7(value: String?): UserRecord {
        set(6, value)
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: Int?, value5: String?, value6: String?, value7: String?): UserRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised UserRecord
     */
    constructor(userid: Int? = null, firstname: String? = null, lastname: String? = null, age: Int? = null, phone: String? = null, email: String? = null, password: String? = null): this() {
        this.userid = userid
        this.firstname = firstname
        this.lastname = lastname
        this.age = age
        this.phone = phone
        this.email = email
        this.password = password
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised UserRecord
     */
    constructor(value: org.jooq.generated.tables.pojos.User?): this() {
        if (value != null) {
            this.userid = value.userid
            this.firstname = value.firstname
            this.lastname = value.lastname
            this.age = value.age
            this.phone = value.phone
            this.email = value.email
            this.password = value.password
            resetChangedOnNotNull()
        }
    }
}

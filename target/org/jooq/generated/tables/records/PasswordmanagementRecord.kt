/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.generated.tables.Passwordmanagement
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PasswordmanagementRecord() : UpdatableRecordImpl<PasswordmanagementRecord>(Passwordmanagement.PASSWORDMANAGEMENT), Record5<Int?, Int?, String?, String?, String?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var userid: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var secretkey: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var salt: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var iv: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Int?, Int?, String?, String?, String?> = super.fieldsRow() as Row5<Int?, Int?, String?, String?, String?>
    override fun valuesRow(): Row5<Int?, Int?, String?, String?, String?> = super.valuesRow() as Row5<Int?, Int?, String?, String?, String?>
    override fun field1(): Field<Int?> = Passwordmanagement.PASSWORDMANAGEMENT.ID
    override fun field2(): Field<Int?> = Passwordmanagement.PASSWORDMANAGEMENT.USERID
    override fun field3(): Field<String?> = Passwordmanagement.PASSWORDMANAGEMENT.SECRETKEY
    override fun field4(): Field<String?> = Passwordmanagement.PASSWORDMANAGEMENT.SALT
    override fun field5(): Field<String?> = Passwordmanagement.PASSWORDMANAGEMENT.IV
    override fun component1(): Int? = id
    override fun component2(): Int? = userid
    override fun component3(): String? = secretkey
    override fun component4(): String? = salt
    override fun component5(): String? = iv
    override fun value1(): Int? = id
    override fun value2(): Int? = userid
    override fun value3(): String? = secretkey
    override fun value4(): String? = salt
    override fun value5(): String? = iv

    override fun value1(value: Int?): PasswordmanagementRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): PasswordmanagementRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): PasswordmanagementRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): PasswordmanagementRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): PasswordmanagementRecord {
        set(4, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: String?, value4: String?, value5: String?): PasswordmanagementRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised PasswordmanagementRecord
     */
    constructor(id: Int? = null, userid: Int? = null, secretkey: String? = null, salt: String? = null, iv: String? = null): this() {
        this.id = id
        this.userid = userid
        this.secretkey = secretkey
        this.salt = salt
        this.iv = iv
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised PasswordmanagementRecord
     */
    constructor(value: org.jooq.generated.tables.pojos.Passwordmanagement?): this() {
        if (value != null) {
            this.id = value.id
            this.userid = value.userid
            this.secretkey = value.secretkey
            this.salt = value.salt
            this.iv = value.iv
            resetChangedOnNotNull()
        }
    }
}
